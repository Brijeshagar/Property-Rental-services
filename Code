Sample Code
import java.io.*;
import java.util.Scanner;

// Main class to run the program
public class StudentHousingSystem {
    public static void main(String[] args) {
        HousingManager manager = new HousingManager();
        manager.loadAccommodations("Oop_Project - Accommodations_Full.csv.csv");
        manager.startSystem();
    }
}

// Class to represent an accommodation
class Accommodation {
    // Instance variables
    private String name;
    private String type;
    private String location;
    private int rent;
    private boolean wifi;
    private boolean meals;
    private boolean security;
    private double rating;
    private int roomSharing;
    private boolean laundry;
    private boolean mess;
    private boolean ac;
    private boolean geyser;
    private boolean kitchen;
    private String curfew;
    private String gender;

    // Constructor
    public Accommodation(String name, String type, String location, int rent, boolean wifi, 
                        boolean meals, boolean security, double rating, int roomSharing, 
                        boolean laundry, boolean mess, boolean ac, boolean geyser, 
                        boolean kitchen, String curfew, String gender) {
        this.name = name;
        this.type = type;
        this.location = location;
        this.rent = rent;
        this.wifi = wifi;
        this.meals = meals;
        this.security = security;
        this.rating = rating;
        this.roomSharing = roomSharing;
        this.laundry = laundry;
        this.mess = mess;
        this.ac = ac;
        this.geyser = geyser;
        this.kitchen = kitchen;
        this.curfew = curfew;
        this.gender = gender;
    }

    // Getters for all properties
    public String getName() { return name; }
    public String getType() { return type; }
    public String getLocation() { return location; }
    public int getRent() { return rent; }
    public boolean hasWifi() { return wifi; }
    public boolean hasMeals() { return meals; }
    public boolean hasSecurity() { return security; }
    public double getRating() { return rating; }
    public int getRoomSharing() { return roomSharing; }
    public boolean hasLaundry() { return laundry; }
    public boolean hasMess() { return mess; }
    public boolean hasAC() { return ac; }
    public boolean hasGeyser() { return geyser; }
    public boolean hasKitchen() { return kitchen; }
    public String getCurfew() { return curfew; }
    public String getGender() { return gender; }

    // Method to display accommodation details
    public void displayDetails() {
        System.out.println("\n--- Accommodation Details ---");
        System.out.println("Name: " + name);
        System.out.println("Type: " + type);
        System.out.println("Location: " + location);
        System.out.println("Rent: â‚¹" + rent);
        System.out.println("Rating: " + rating + "/5");
        System.out.println("Room Sharing: " + roomSharing + " sharing");
        System.out.println("Gender: " + gender);
        System.out.println("Curfew: " + (curfew.equals("None") ? "No curfew" : curfew));
        System.out.println("\nFacilities:");
        System.out.println("- WiFi: " + (wifi ? "Yes" : "No"));
        System.out.println("- Meals: " + (meals ? "Yes" : "No"));
        System.out.println("- Security: " + (security ? "Yes" : "No"));
        System.out.println("- Laundry: " + (laundry ? "Yes" : "No"));
        System.out.println("- Mess: " + (mess ? "Yes" : "No"));
        System.out.println("- AC: " + (ac ? "Yes" : "No"));
        System.out.println("- Geyser: " + (geyser ? "Yes" : "No"));
        System.out.println("- Kitchen: " + (kitchen ? "Yes" : "No"));
    }
}

// Interface for authentication
interface Authenticable {
    boolean login(String username, String password);
    void register(String username, String password);
}

// Class to handle user authentication
class UserAuthenticator implements Authenticable {
    private String username;
    private String password;
    
    @Override
    public boolean login(String username, String password) {
        // In a real system, this would check against a database
        return this.username != null && this.username.equals(username) && 
               this.password != null && this.password.equals(password);
    }
    
    @Override
    public void register(String username, String password) {
        this.username = username;
        this.password = password;
        System.out.println("Registration successful! You can now login with your credentials.");
    }
}

// Main housing manager class
class HousingManager {
    private Accommodation[] accommodations;
    private int accommodationCount;
    private Scanner scanner;
    private UserAuthenticator authenticator;
    private String currentUser;

    // Constructor
    public HousingManager() {
        accommodations = new Accommodation[100]; // Fixed size array (no collections)
        accommodationCount = 0;
        scanner = new Scanner(System.in);
        authenticator = new UserAuthenticator();
        currentUser = null;
    }

    // Method to load accommodations from CSV file
    public void loadAccommodations(String filename) {
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            boolean firstLine = true;
            
            while ((line = br.readLine()) != null && accommodationCount < accommodations.length) {
                if (firstLine) {
                    firstLine = false;
                    continue; // Skip header
                }
                
                String[] values = line.split(",");
                if (values.length >= 16) {
                    Accommodation acc = new Accommodation(
                        values[0].trim(), // Name
                        values[1].trim(), // Type
                        values[2].trim(), // Location
                        Integer.parseInt(values[3].trim()), // Rent
                        values[4].trim().equals("Yes"), // WiFi
                        values[5].trim().equals("Yes"), // Meals
                        values[6].trim().equals("Yes"), // Security
                        Double.parseDouble(values[7].trim()), // Rating
                        Integer.parseInt(values[8].trim()), // RoomSharing
                        values[9].trim().equals("Yes"), // Laundry
                        values[10].trim().equals("Yes"), // Mess
                        values[11].trim().equals("Yes"), // AC
                        values[12].trim().equals("Yes"), // Geyser
                        values[13].trim().equals("Yes"), // Kitchen
                        values[14].trim(), // Curfew
                        values[15].trim()  // Gender
                    );
                    accommodations[accommodationCount++] = acc;
                }
            }
            System.out.println("Loaded " + accommodationCount + " accommodations from file.");
        } catch (IOException e) {
            System.out.println("Error loading accommodations: " + e.getMessage());
        } catch (NumberFormatException e) {
            System.out.println("Error parsing data: " + e.getMessage());
        }
    }

    // Method to start the system
    public void startSystem() {
        System.out.println("\n=== Welcome to Student Housing Management System ===");
        System.out.println("1. Login");
        System.out.println("2. Register");
        System.out.println("3. Exit");
        System.out.print("Enter your choice: ");
        
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        
        switch (choice) {
            case 1:
                handleLogin();
                break;
            case 2:
                handleRegistration();
                break;
            case 3:
                System.out.println("Thank you for using the system. Goodbye!");
                System.exit(0);
                break;
            default:
                System.out.println("Invalid choice. Please try again.");
                startSystem();
        }
    }

    // Method to handle user login
    private void handleLogin() {
        System.out.print("\nEnter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();
        
        if (authenticator.login(username, password)) {
            currentUser = username;
            System.out.println("\nLogin successful! Welcome, " + username + "!");
            showMainMenu();
        } else {
            System.out.println("Invalid username or password. Please try again.");
            startSystem();
        }
    }

    // Method to handle user registration
    private void handleRegistration() {
        System.out.print("\nEnter a username: ");
        String username = scanner.nextLine();
        System.out.print("Enter a password: ");
        String password = scanner.nextLine();
        
        authenticator.register(username, password);
        startSystem();
    }

    // Method to show main menu after login
    private void showMainMenu() {
        System.out.println("\n=== Main Menu ===");
        System.out.println("1. Search Accommodations");
        System.out.println("2. View All Accommodations");
        System.out.println("3. Filter Accommodations");
        System.out.println("4. Logout");
        System.out.print("Enter your choice: ");
        
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        
        switch (choice) {
            case 1:
                searchAccommodations();
                break;
            case 2:
                viewAllAccommodations();
                break;
            case 3:
                filterAccommodations();
                break;
            case 4:
                currentUser = null;
                System.out.println("Logged out successfully.");
                startSystem();
                break;
            default:
                System.out.println("Invalid choice. Please try again.");
                showMainMenu();
        }
    }

    // Method to search accommodations by type
    private void searchAccommodations() {
        System.out.println("\n=== Search Accommodations ===");
        System.out.println("1. PG (Paying Guest)");
        System.out.println("2. Hostel");
        System.out.println("3. Flat");
        System.out.println("4. View All Types");
        System.out.println("5. Back to Main Menu");
        System.out.print("Enter your choice: ");
        
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        
        String type = "";
        switch (choice) {
            case 1:
                type = "PG";
                break;
            case 2:
                type = "Hostel";
                break;
            case 3:
                type = "Flat";
                break;
            case 4:
                viewAllAccommodations();
                return;
            case 5:
                showMainMenu();
                return;
            default:
                System.out.println("Invalid choice. Please try again.");
                searchAccommodations();
                return;
        }
        
        System.out.println("\n=== Available " + type + " Accommodations ===");
        boolean found = false;
        for (int i = 0; i < accommodationCount; i++) {
            if (accommodations[i].getType().equalsIgnoreCase(type)) {
                System.out.println((i+1) + ". " + accommodations[i].getName() + 
                                 " - " + accommodations[i].getLocation() + 
                                 " (â‚¹" + accommodations[i].getRent() + ")");
                found = true;
            }
        }
        
        if (!found) {
            System.out.println("No " + type + " accommodations found.");
        } else {
            viewAccommodationDetails();
        }
        
        showMainMenu();
    }

    // Method to view all accommodations
    private void viewAllAccommodations() {
        System.out.println("\n=== All Available Accommodations ===");
        for (int i = 0; i < accommodationCount; i++) {
            System.out.println((i+1) + ". " + accommodations[i].getName() + 
                             " (" + accommodations[i].getType() + ") - " + 
                             accommodations[i].getLocation() + 
                             " (â‚¹" + accommodations[i].getRent() + ")");
        }
        
        viewAccommodationDetails();
        showMainMenu();
    }

    // Method to view details of a specific accommodation
    private void viewAccommodationDetails() {
        System.out.print("\nEnter the number to view details (0 to go back): ");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        
        if (choice == 0) {
            return;
        } else if (choice > 0 && choice <= accommodationCount) {
            accommodations[choice-1].displayDetails();
            System.out.print("\nWould you like to book this accommodation? (yes/no): ");
            String bookChoice = scanner.nextLine();
            
            if (bookChoice.equalsIgnoreCase("yes")) {
                bookAccommodation(choice-1);
            }
        } else {
            System.out.println("Invalid choice. Please try again.");
            viewAccommodationDetails();
        }
    }

    // Method to book an accommodation
    private void bookAccommodation(int index) {
        System.out.println("\n=== Booking Process ===");
        System.out.println("You are booking: " + accommodations[index].getName());
        System.out.println("Rent: â‚¹" + accommodations[index].getRent());
        
        System.out.print("Enter your full name: ");
        String name = scanner.nextLine();
        System.out.print("Enter your contact number: ");
        String contact = scanner.nextLine();
        System.out.print("Enter your university: ");
        String university = scanner.nextLine();
        
        System.out.println("\nBooking confirmed for " + name + "!");
        System.out.println("Contact: " + contact);
        System.out.println("Accommodation: " + accommodations[index].getName());
        System.out.println("Please contact the owner to complete the process.");
        
        // In a real system, we would save this booking information
        System.out.println("\nThank you for using our service!");
    }

    // Method to filter accommodations
    private void filterAccommodations() {
        System.out.println("\n=== Filter Accommodations ===");
        System.out.println("Filter by:");
        System.out.println("1. Location");
        System.out.println("2. Rent Range");
        System.out.println("3. Facilities");
        System.out.println("4. Rating");
        System.out.println("5. Gender Preference");
        System.out.println("6. Back to Main Menu");
        System.out.print("Enter your choice: ");
        
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        
        switch (choice) {
            case 1:
                filterByLocation();
                break;
            case 2:
                filterByRent();
                break;
            case 3:
                filterByFacilities();
                break;
            case 4:
                filterByRating();
                break;
            case 5:
                filterByGender();
                break;
            case 6:
                showMainMenu();
                break;
            default:
                System.out.println("Invalid choice. Please try again.");
                filterAccommodations();
        }
    }

    // Filter by location
    private void filterByLocation() {
        System.out.println("\nAvailable Locations:");
        System.out.println("- Prem Nagar");
        System.out.println("- Bhidoli");
        System.out.println("- Kandoli");
        System.out.print("Enter location to filter: ");
        String location = scanner.nextLine();
        
        System.out.println("\n=== Accommodations in " + location + " ===");
        boolean found = false;
        for (int i = 0; i < accommodationCount; i++) {
            if (accommodations[i].getLocation().equalsIgnoreCase(location)) {
                System.out.println((i+1) + ". " + accommodations[i].getName() + 
                                 " (" + accommodations[i].getType() + ") - " + 
                                 "â‚¹" + accommodations[i].getRent());
                found = true;
            }
        }
        
        if (!found) {
            System.out.println("No accommodations found in " + location);
        } else {
            viewAccommodationDetails();
        }
        
        showMainMenu();
    }

    // Filter by rent range
    private void filterByRent() {
        System.out.print("\nEnter minimum rent: ");
        int min = scanner.nextInt();
        System.out.print("Enter maximum rent: ");
        int max = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        
        System.out.println("\n=== Accommodations between â‚¹" + min + " and â‚¹" + max + " ===");
        boolean found = false;
        for (int i = 0; i < accommodationCount; i++) {
            if (accommodations[i].getRent() >= min && accommodations[i].getRent() <= max) {
                System.out.println((i+1) + ". " + accommodations[i].getName() + 
                                 " (" + accommodations[i].getType() + ") - " + 
                                 accommodations[i].getLocation() + 
                                 " (â‚¹" + accommodations[i].getRent() + ")");
                found = true;
            }
        }
        
        if (!found) {
            System.out.println("No accommodations found in this rent range.");
        } else {
            viewAccommodationDetails();
        }
        
        showMainMenu();
    }

    // Filter by facilities
    private void filterByFacilities() {
        System.out.println("\nSelect facilities to filter by:");
        System.out.println("1. WiFi");
        System.out.println("2. Meals");
        System.out.println("3. Security");
        System.out.println("4. Laundry");
        System.out.println("5. AC");
        System.out.println("6. Geyser");
        System.out.println("7. Kitchen");
        System.out.print("Enter facility numbers (comma separated, e.g., 1,3,5): ");
        
        String[] choices = scanner.nextLine().split(",");
        boolean[] selected = new boolean[7]; // For 7 facilities
        
        for (String choice : choices) {
            try {
                int num = Integer.parseInt(choice.trim());
                if (num >= 1 && num <= 7) {
                    selected[num-1] = true;
                }
            } catch (NumberFormatException e) {
                // Ignore invalid entries
            }
        }
        
        System.out.println("\n=== Accommodations with selected facilities ===");
        boolean found = false;
        
        for (int i = 0; i < accommodationCount; i++) {
            boolean matches = true;
            
            if (selected[0] && !accommodations[i].hasWifi()) matches = false;
            if (selected[1] && !accommodations[i].hasMeals()) matches = false;
            if (selected[2] && !accommodations[i].hasSecurity()) matches = false;
            if (selected[3] && !accommodations[i].hasLaundry()) matches = false;
            if (selected[4] && !accommodations[i].hasAC()) matches = false;
            if (selected[5] && !accommodations[i].hasGeyser()) matches = false;
            if (selected[6] && !accommodations[i].hasKitchen()) matches = false;
            
            if (matches) {
                System.out.println((i+1) + ". " + accommodations[i].getName() + 
                                 " (" + accommodations[i].getType() + ") - " + 
                                 accommodations[i].getLocation() + 
                                 " (â‚¹" + accommodations[i].getRent() + ")");
                found = true;
            }
        }
        
        if (!found) {
            System.out.println("No accommodations found with all selected facilities.");
        } else {
            viewAccommodationDetails();
        }
        
        showMainMenu();
    }

    // Filter by rating
    private void filterByRating() {
        System.out.print("\nEnter minimum rating (1-5): ");
        double minRating = scanner.nextDouble();
        scanner.nextLine(); // Consume newline
        
        System.out.println("\n=== Accommodations with rating " + minRating + "+ ===");
        boolean found = false;
        for (int i = 0; i < accommodationCount; i++) {
            if (accommodations[i].getRating() >= minRating) {
                System.out.println((i+1) + ". " + accommodations[i].getName() + 
                                 " (" + accommodations[i].getType() + ") - " + 
                                 accommodations[i].getLocation() + 
                                 " (Rating: " + accommodations[i].getRating() + ")");
                found = true;
            }
        }
        
        if (!found) {
            System.out.println("No accommodations found with this minimum rating.");
        } else {
            viewAccommodationDetails();
        }
        
        showMainMenu();
    }

    // Filter by gender
    private void filterByGender() {
        System.out.println("\nSelect gender preference:");
        System.out.println("1. Male");
        System.out.println("2. Female");
        System.out.println("3. Unisex");
        System.out.print("Enter your choice: ");
        
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        
        String gender = "";
        switch (choice) {
            case 1:
                gender = "Male";
                break;
            case 2:
                gender = "Female";
                break;
            case 3:
                gender = "Unisex";
                break;
            default:
                System.out.println("Invalid choice. Please try again.");
                filterByGender();
                return;
        }
        
        System.out.println("\n=== " + gender + " Accommodations ===");
        boolean found = false;
        for (int i = 0; i < accommodationCount; i++) {
            if (accommodations[i].getGender().equalsIgnoreCase(gender)) {
                System.out.println((i+1) + ". " + accommodations[i].getName() + 
                                 " (" + accommodations[i].getType() + ") - " + 
                                 accommodations[i].getLocation() + 
                                 " (â‚¹" + accommodations[i].getRent() + ")");
                found = true;
            }
        }
        
        if (!found) {
            System.out.println("No " + gender + " accommodations found.");
        } else {
            viewAccommodationDetails();
        }
        
        showMainMenu();
    }
}





/// another code 
import java.io.*;
import java.util.*;

// Unit II: Class fundamentals, inheritance, interfaces
interface Housing {
    void displayDetails();
    double calculateDiscount(int months);
}

// Abstract class demonstrating Unit II concepts
abstract class Property implements Housing {
    protected String name;
    protected String type;
    protected String location;
    protected double rent;
    protected boolean wifi;
    protected boolean meals;
    protected double rating;

    // Constructor
    public Property(String name, String type, String location, double rent, 
                   boolean wifi, boolean meals, double rating) {
        this.name = name;
        this.type = type;
        this.location = location;
        this.rent = rent;
        this.wifi = wifi;
        this.meals = meals;
        this.rating = rating;
    }

    // Method overloading (Unit II)
    public void displayDetails() {
        System.out.println("Property: " + name);
    }

    public void displayDetails(boolean showAll) {
        if (showAll) {
            System.out.println("Property: " + name);
            System.out.println("Type: " + type);
            System.out.println("Location: " + location);
            System.out.println("Rent: â‚¹" + rent + "/month");
            System.out.println("WiFi: " + (wifi ? "Yes" : "No"));
            System.out.println("Meals: " + (meals ? "Yes" : "No"));
            System.out.println("Rating: " + rating + "/5");
        } else {
            displayDetails();
        }
    }

    // Abstract method
    public abstract String getFacilities();
}

// Unit II: Inheritance
class PG extends Property {
    private int sharing;
    private String curfew;

    public PG(String name, String type, String location, double rent, 
             boolean wifi, boolean meals, double rating, int sharing, String curfew) {
        super(name, type, location, rent, wifi, meals, rating);
        this.sharing = sharing;
        this.curfew = curfew;
    }

    // Method overriding (Unit II)
    @Override
    public String getFacilities() {
        return "Sharing: " + sharing + ", Curfew: " + curfew;
    }

    @Override
    public double calculateDiscount(int months) {
        if (months >= 6) {
            return rent * 0.9; // 10% discount for 6+ months
        }
        return rent;
    }
}

class Hostel extends Property {
    private boolean laundry;
    private boolean mess;

    public Hostel(String name, String type, String location, double rent, 
                 boolean wifi, boolean meals, double rating, boolean laundry, boolean mess) {
        super(name, type, location, rent, wifi, meals, rating);
        this.laundry = laundry;
        this.mess = mess;
    }

    @Override
    public String getFacilities() {
        return "Laundry: " + (laundry ? "Yes" : "No") + ", Mess: " + (mess ? "Yes" : "No");
    }

    @Override
    public double calculateDiscount(int months) {
        if (months >= 12) {
            return rent * 0.85; // 15% discount for yearly stay
        }
        return rent;
    }
}

// Unit III: Nested class example
class HousingSystem {
    // Static nested class for configuration
    static class Config {
        static final String DATA_FILE = "housing_data.txt";
        static final String[] LOCATIONS = {"Prem Nagar", "Bhidoli", "Kandoli"};
    }

    private List<Property> properties;

    public HousingSystem() {
        properties = new ArrayList<>();
    }

    // Unit I: Arrays and program control statements
    public void loadProperties() {
        try (BufferedReader br = new BufferedReader(new FileReader(Config.DATA_FILE))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split("\t");
                // Process data and create property objects
                // (Implementation would parse the data file columns)
            }
        } catch (IOException e) {
            // Unit III: Exception handling
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    public void addProperty(Property property) {
        properties.add(property);
    }

    public void displayAllProperties() {
        for (Property p : properties) {
            p.displayDetails(true);
            System.out.println("Facilities: " + p.getFacilities());
            System.out.println("-----------------------");
        }
    }

    // Unit I: Strings and arrays
    public Property[] filterByLocation(String location) {
        List<Property> filtered = new ArrayList<>();
        for (Property p : properties) {
            if (p.location.equalsIgnoreCase(location)) {
                filtered.add(p);
            }
        }
        return filtered.toArray(new Property[0]);
    }
}

public class StudentHousingApp {
    public static void main(String[] args) {
        // Unit I: Comment line arguments
        if (args.length > 0) {
            System.out.println("Command line arguments received:");
            for (String arg : args) {
                System.out.println(arg);
            }
        }

        HousingSystem system = new HousingSystem();

        // Add sample properties (would normally load from file)
        system.addProperty(new PG("Maple Residency PG", "PG", "Prem Nagar", 12534, 
                                false, true, 4.3, 3, "10:00 PM"));
        system.addProperty(new Hostel("Sunrise Boys Hostel", "Hostel", "Prem Nagar", 
                                    14816, false, true, 4.4, true, true));

        // Display all properties
        system.displayAllProperties();

        // Filter by location
        System.out.println("\nProperties in Prem Nagar:");
        Property[] premNagarProps = system.filterByLocation("Prem Nagar");
        for (Property p : premNagarProps) {
            p.displayDetails();
        }

        // Unit I: Operators and variables
        double budget = 10000;
        System.out.println("\nProperties under â‚¹" + budget + ":");
        for (Property p : system.filterByLocation("Prem Nagar")) {
            if (p.rent <= budget) {
                p.displayDetails(true);
            }
        }

        // Unit III: Thread example
        Thread dataLoader = new Thread(() -> {
            System.out.println("\nLoading data in background...");
            system.loadProperties();
        });
        dataLoader.start();
    }
}
